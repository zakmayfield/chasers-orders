generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @unique
  token      String   @unique
  expires    DateTime
  valid      Boolean  @default(true)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model User {
  // auth
  id                String              @id @default(cuid())
  email             String              @unique
  password          String
  emailVerified     DateTime?
  // additional data
  contact           Contact? // 1:1
  company           Company? // 1:1
  cart              Cart? // 1:1
  orders            Order[] // 1:m
  favorites         Favorite[]
  username          String?             @unique
  // authorization
  isApproved        Boolean             @default(false)
  verificationToken VerificationToken[] // 1:m
  role              Role                @default(USER)
  permissions       UserPermission[]
  // NextAuth
  image             String?
  accounts          Account[]
  sessions          Session[]
}

enum Role {
  ADMIN
  USER
  SUPER
}

model AuthorizedAdmin {
  id    String @id @default(cuid())
  email String @unique
}

model Permission {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  users UserPermission[]
}

model UserPermission {
  userId       String
  permissionId String

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([userId, permissionId])
}

model Contact {
  id          String  @id @default(cuid())
  name        String
  position    String?
  phoneNumber String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Company {
  id                  String           @id @default(cuid())
  name                String
  shippingAddress     ShippingAddress?
  billingAddress      BillingAddress?
  accountPayableEmail String
  paymentMethod       String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShippingAddress {
  id                   String  @id @default(cuid())
  streetAddress        String
  unit                 String?
  city                 String
  state                String
  postalCode           String
  deliveryInstructions String?

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String  @unique
}

model BillingAddress {
  id            String  @id @default(cuid())
  streetAddress String
  unit          String?
  city          String
  state         String
  postalCode    String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String  @unique
}

model Product {
  id        String     @id @default(cuid())
  name      String // Product name, e.g., "Banana-Mango-Pineapple"
  category  String // Product category, e.g., "BLENDS"
  units     Unit[]
  favorites Favorite[]
}

model Unit {
  id String @id @default(cuid())

  size  String
  price Float
  code  String

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  carts         UnitsOnCart[]
  OrderLineItem OrderLineItem[]
}

model Cart {
  id String @id @default(cuid())

  items UnitsOnCart[]

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model UnitsOnCart {
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String
  unit   Unit   @relation(fields: [unitId], references: [id])
  unitId String @unique

  quantity  Int
  createdAt DateTime @default(now())

  @@id([cartId, unitId])
}

model Order {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  lineItems OrderLineItem[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model OrderLineItem {
  id       String @id @default(cuid())
  quantity Int

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  unit  Unit  @relation(fields: [unitId], references: [id])

  orderId String
  unitId  String
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  juice   Product @relation(fields: [juiceId], references: [id])
  juiceId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId, juiceId])
}
