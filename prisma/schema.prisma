generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

// ----- NEXTAUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @unique
  token      String   @unique
  expires    DateTime
  valid      Boolean  @default(true)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

// ----- END NEXTAUTH

// ----- USER
model User {
  // auth
  id                String              @id @default(cuid())
  email             String              @unique
  password          String
  emailVerified     DateTime?
  // additional data
  contact           Contact?
  company           Company?
  cart              Cart?
  orders            Order[]
  favorites         Favorite[]
  username          String?             @unique
  // authorization
  isApproved        Boolean             @default(false)
  verificationToken VerificationToken[]
  role              Role                @default(USER)
  permissions       UserPermission[]
  // NextAuth
  image             String?
  accounts          Account[]
  sessions          Session[]
}

enum Role {
  ADMIN
  USER
  SUPER
}

model AuthorizedAdmin {
  id    String @id @default(cuid())
  email String @unique
}

model Permission {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  users UserPermission[]
}

model UserPermission {
  userId       String
  permissionId String

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([userId, permissionId])
}

model Contact {
  id          String  @id @default(cuid())
  name        String
  position    String?
  phoneNumber String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Company {
  id                  String           @id @default(cuid())
  name                String
  shippingAddress     ShippingAddress?
  billingAddress      BillingAddress?
  accountPayableEmail String
  paymentMethod       String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShippingAddress {
  id                   String  @id @default(cuid())
  streetAddress        String
  unit                 String?
  city                 String
  state                String
  postalCode           String
  deliveryInstructions String?

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String  @unique
}

model BillingAddress {
  id            String  @id @default(cuid())
  streetAddress String
  unit          String?
  city          String
  state         String
  postalCode    String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String  @unique
}

// ----- END USER

// ----- PRODUCTS
model Category {
  category_id String @id @default(cuid())
  name        String

  products Product[]
}

model Product {
  product_id  String @id @default(cuid())
  category_id String

  name String

  variants  ProductVariant[]
  favorites Favorite[]
  category  Category         @relation(fields: [category_id], references: [category_id])
}

model ProductVariant {
  product_variant_id String @id @default(cuid())
  product_id         String

  variant    Variant?
  line_items LineItem[]
  carts      CartItem[]
  product    Product    @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}

model Variant {
  variant_id         String @id @default(cuid())
  product_variant_id String @unique

  name  String
  code  String
  price Float

  product_variant ProductVariant? @relation(fields: [product_variant_id], references: [product_variant_id], onDelete: Cascade)
}

model Favorite {
  favorite_id String @id @default(cuid())
  product_id  String
  userId      String

  created_at DateTime @default(now())

  product Product @relation(fields: [product_id], references: [product_id])
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, product_id])
}

// ----- END PRODUCTS

// ----- CART
model Cart {
  cart_id String     @id @default(cuid())
  userId  String     @unique
  items   CartItem[]
  user    User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  cart_id            String
  product_variant_id String @unique

  quantity   Int
  created_at DateTime @default(now())

  cart            Cart           @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade)
  product_variant ProductVariant @relation(fields: [product_variant_id], references: [product_variant_id])

  @@id([cart_id, product_variant_id])
}

// ----- END CART

// ----- ORDER
model Order {
  order_id String @id @default(cuid())
  userId   String

  created_at DateTime   @default(now())
  line_items LineItem[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LineItem {
  line_item_id       String @id @default(cuid())
  order_id           String
  product_variant_id String

  quantity Int

  order           Order          @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  product_variant ProductVariant @relation(fields: [product_variant_id], references: [product_variant_id])
}

// ----- END ORDER
